// unidragger@3.0.1 downloaded from https://ga.jspm.io/npm:unidragger@3.0.1/unidragger.js

import*as t from"ev-emitter";var i="default"in t?t.default:t;var n="undefined"!==typeof globalThis?globalThis:"undefined"!==typeof self?self:global;var e={};(function(t,n){e?e=n(t,i):t.Unidragger=n(t,t.EvEmitter)})("undefined"!=typeof window?window:e,(function factory(t,i){function Unidragger(){}let e=Unidragger.prototype=Object.create(i.prototype);e.handleEvent=function(t){let i="on"+t.type;(this||n)[i]&&this[i](t)};let o,r;if("ontouchstart"in t){o="touchstart";r=["touchmove","touchend","touchcancel"]}else if(t.PointerEvent){o="pointerdown";r=["pointermove","pointerup","pointercancel"]}else{o="mousedown";r=["mousemove","mouseup"]}e.touchActionValue="none";e.bindHandles=function(){this._bindHandles("addEventListener",(this||n).touchActionValue)};e.unbindHandles=function(){this._bindHandles("removeEventListener","")};
/**
   * Add or remove start event
   * @param {String} bindMethod - addEventListener or removeEventListener
   * @param {String} touchAction - value for touch-action CSS property
   */e._bindHandles=function(i,e){(this||n).handles.forEach((r=>{r[i](o,this||n);r[i]("click",this||n);t.PointerEvent&&(r.style.touchAction=e)}))};e.bindActivePointerEvents=function(){r.forEach((i=>{t.addEventListener(i,this||n)}))};e.unbindActivePointerEvents=function(){r.forEach((i=>{t.removeEventListener(i,this||n)}))};e.withPointer=function(t,i){i.pointerId===(this||n).pointerIdentifier&&this[t](i,i)};e.withTouch=function(t,i){let e;for(let t of i.changedTouches)t.identifier===(this||n).pointerIdentifier&&(e=t);e&&this[t](i,e)};e.onmousedown=function(t){this.pointerDown(t,t)};e.ontouchstart=function(t){this.pointerDown(t,t.changedTouches[0])};e.onpointerdown=function(t){this.pointerDown(t,t)};const s=["TEXTAREA","INPUT","SELECT","OPTION"];const h=["radio","checkbox","button","submit","image","file"];
/**
   * any time you set `event, pointer` it refers to:
   * @param {Event} event
   * @param {Event | Touch} pointer
   */e.pointerDown=function(t,i){let e=s.includes(t.target.nodeName);let o=h.includes(t.target.type);let r=!e||o;let c=!(this||n).isPointerDown&&!t.button&&r;if(c){(this||n).isPointerDown=true;(this||n).pointerIdentifier=void 0!==i.pointerId?i.pointerId:i.identifier;(this||n).pointerDownPointer={pageX:i.pageX,pageY:i.pageY};this.bindActivePointerEvents();this.emitEvent("pointerDown",[t,i])}};e.onmousemove=function(t){this.pointerMove(t,t)};e.onpointermove=function(t){this.withPointer("pointerMove",t)};e.ontouchmove=function(t){this.withTouch("pointerMove",t)};e.pointerMove=function(t,i){let e={x:i.pageX-(this||n).pointerDownPointer.pageX,y:i.pageY-(this||n).pointerDownPointer.pageY};this.emitEvent("pointerMove",[t,i,e]);let o=!(this||n).isDragging&&this.hasDragStarted(e);o&&this.dragStart(t,i);(this||n).isDragging&&this.dragMove(t,i,e)};e.hasDragStarted=function(t){return Math.abs(t.x)>3||Math.abs(t.y)>3};e.dragStart=function(t,i){(this||n).isDragging=true;(this||n).isPreventingClicks=true;this.emitEvent("dragStart",[t,i])};e.dragMove=function(t,i,n){this.emitEvent("dragMove",[t,i,n])};e.onmouseup=function(t){this.pointerUp(t,t)};e.onpointerup=function(t){this.withPointer("pointerUp",t)};e.ontouchend=function(t){this.withTouch("pointerUp",t)};e.pointerUp=function(t,i){this.pointerDone();this.emitEvent("pointerUp",[t,i]);(this||n).isDragging?this.dragEnd(t,i):this.staticClick(t,i)};e.dragEnd=function(t,i){(this||n).isDragging=false;setTimeout((()=>delete(this||n).isPreventingClicks));this.emitEvent("dragEnd",[t,i])};e.pointerDone=function(){(this||n).isPointerDown=false;delete(this||n).pointerIdentifier;this.unbindActivePointerEvents();this.emitEvent("pointerDone")};e.onpointercancel=function(t){this.withPointer("pointerCancel",t)};e.ontouchcancel=function(t){this.withTouch("pointerCancel",t)};e.pointerCancel=function(t,i){this.pointerDone();this.emitEvent("pointerCancel",[t,i])};e.onclick=function(t){(this||n).isPreventingClicks&&t.preventDefault()};e.staticClick=function(t,i){let e="mouseup"===t.type;if(!e||!(this||n).isIgnoringMouseUp){this.emitEvent("staticClick",[t,i]);if(e){(this||n).isIgnoringMouseUp=true;setTimeout((()=>{delete(this||n).isIgnoringMouseUp}),400)}}};return Unidragger}));var o=e;export{o as default};

